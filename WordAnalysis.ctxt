#BlueJ class context
comment0.params=fileName
comment0.target=WordAnalysis(java.lang.String)
comment0.text=\n\ Creates\ a\ list\ of\ words\ from\ a\ file\ and\ frequency\ of\ use\n\ \n\ @param\ \ fileName\ \ \ \ the\ name\ of\ the\ text\ of\ the\ book\n\ @throws\ IOException\ file\ is\ not\ found\n
comment1.params=fileName
comment1.target=void\ readFile(java.lang.String)
comment1.text=\n\ Reads\ the\ file,\ storing\ words\ in\ an\ ArrayList.\ \ Words\ not\ seen\ before\ \n\ are\ added\ to\ the\ ArrayList.\ \ Words\ seen\ before\ have\ their\ frequency\n\ increased\ by\ one.\n\ \n\ @param\ fileName\ \ \ the\ pathname\ of\ the\ file\n\ @throws\ IOException\ file\ is\ not\ found\n
comment10.params=
comment10.target=long\ sumWords()
comment10.text=\n\ Determines\ how\ many\ words,\ in\ total,\ are\ in\ the\ original\ file\ that\ was\ read\ in.\n\ \n\ @return\ the\ total\ number\ of\ words\ that\ are\ in\ the\ original\ document;\n\ \ \ \ \ \ \ \ \ in\ other\ words,\ the\ total\ frequency\ of\ the\ words\ in\ "words"\n\ \ \ \ \ \ \ \ \ list\n
comment11.params=number
comment11.target=long\ sumTopWords(int)
comment11.text=\n\ Determines\ how\ many\ times\ the\ top\ number\ of\ words\ in\ "words"\ list\n\ have\ appeared\ in\ the\ original\ document.\ \ \n\ Note\:\ the\ organization\ of\ the\ list\ (ordered\ alphabetically\ or\ \n\ \ \ \ \ \ \ by\ frequency)\ affects\ this\ outcome.\n\ \n\ @param\ number\ the\ number\ of\ words\ which\ are\ to\ be\ used\ to\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ generate\ the\ sum.\ \ The\ "number"\ indicates\ the\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ first\ "number"\ positions\ in\ the\ words\ list.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ @return\ how\ many\ times\ the\ top\ "number"\ words\ occurs\n
comment12.params=num
comment12.target=double\ getWordQuotient(int)
comment12.text=\n\ Determines\ the\ proportion\ of\ the\ specified\ top\ number\n\ of\ words\ in\ the\ "words"\ list\ divided\ by\ the\ total\ number\ of\n\ words\ in\ the\ text.\n\ \n\ Here\ are\ two\ examples\ using\ the\ book\ "The\ Tale\ of\ Peter\ Rabbit,"\n\ which\ has\ 959\ total\ words\:\n\ \n\ \ \ \ \ \ If\ the\ two\ most\ frequent\ words\ are\ \ \n\ \ \ \ \ \ \ \ \ \ "the",\ which\ appears\ 47\ times,\ and\ \ \n\ \ \ \ \ \ \ \ \ \ "and",\ which\ appears\ 44\ times.\n\ \ \ \ \ \ In\ this\ case,\ getWordQuotient(2)\ returns\ 0.094890...\n\ \ \ \ \ \ \n\ \ \ \ \ \ Alphabetically,\ the\ first\ two\ words\ in\ words\ are\:\n\ \ \ \ \ \ \ \ \ \ "a",\ which\ appears\ 28\ times,\ and\n\ \ \ \ \ \ \ \ \ \ "about",\ which\ appears\ 2\ times.\n\ \ \ \ \ \ In\ this\ case,\ getWordQuotient(2)\ returns\ 0.031282...\n\ \n\ Hence\ the\ organization\ of\ the\ list\ (whether\ ordered\ \n\ lexicographically\ or\ by\ frequency)\ affects\ this\ outcome.\n\ \n\ @param\ num\ \ \ \ the\ number\ of\ words\ which\ are\ to\ be\ used\ to\ create\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ ratio.\ \ The\ number\ indicates\ the\ first\ "num"\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ positions\ in\ the\ words\ list.\n\ @return\ the\ quotient\ as\ described\ in\ the\ summary\n
comment13.params=num
comment13.target=int\ calculatePercentage(int)
comment13.text=\n\ Calculates\ a\ rounded\ percentage\ form\ of\ the\ result\n\ of\ getWordQuotient.\n\ \n\ @param\ \ num\ \ \ the\ number\ of\ words\ being\ considered\n\ @return\ the\ rounded\ percentage\n
comment14.params=
comment14.target=int\ getNumberOfUniqueWords()
comment14.text=\n\ Returns\ how\ many\ different\ words\ are\ in\ the\ original\ file\ \n\ that\ was\ read\ in.\ \ I.e.,\ the\ number\ of\ words\ in\ the\ original\n\ file,\ excluding\ repetitions.\ \ To\ state\ it\ another\ way,\ each\n\ word\ in\ the\ list\ counts\ exactly\ once,\ regardless\ of\ its\ frequency.\n\ \n\ @return\ the\ total\ number\ of\ different\ words\ that\ are\ in\ the\ document.\n
comment15.params=
comment15.target=java.util.ArrayList\ printSortWords()
comment15.text=\n\ Print\ the\ words\ sorted\ lexographically\n\n\ @return\ the\ ArrayList\ of\ words\ sorted\ \n
comment16.params=
comment16.target=java.util.ArrayList\ printSortFrequency()
comment16.text=\n\ Print\ the\ words\ sorted\ by\ their\ frequencies\ \n\ \n\ @return\ the\ ArrayList\ of\ words\ sorted\n
comment17.params=
comment17.target=void\ sortWords()
comment17.text=\n\ Sorts\ the\ words\ alphabetically.\n
comment18.params=
comment18.target=void\ sortFrequency()
comment18.text=\n\ Sorts\ the\ words\ by\ their\ frequencies.\n
comment19.params=low\ high
comment19.target=void\ sortFreqHelper(int,\ int)
comment19.text=\n\ Sort\ "words"\ list\ by\ frequency\ using\ a\ recursive\ merge\ sort.\n\ This\ is\ a\ helper\ method\ for\ sortWords.\n\ \ \ \ \ \ \ \n\ @param\ low\ \ \ \ the\ smallest\ index\ to\ be\ used\ in\ this\ portion\ of\ the\ sort\n\ @param\ high\ \ \ the\ last\ index\ to\ be\ used\ (inclusive)\ in\ this\ portion\ of\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ sort\n
comment2.params=s
comment2.target=java.lang.String\ cleanUp(java.lang.String)
comment2.text=\n\ Cleans\ up\ a\ string\ of\ characters\ so\ it\ has\ only\ apostrophes,\n\ hypens,\ or\ letters\ a\ through\ z.\n\ \n\ @param\ s\ \ the\ original\ input\ string\n\ \n\ @return\ a\ string\ object\ with\ only\ letters.\ \ If\ an\ apostrophe\n\ \ \ \ \ \ \ \ \ or\ a\ dash\ has\ a\ letter\ before\ and\ after\ it,\ that\n\ \ \ \ \ \ \ \ \ character\ is\ also\ included.\n
comment20.params=low\ mid\ high
comment20.target=void\ mergeFreq(int,\ int,\ int)
comment20.text=\n\ Merge\ portions\ of\ the\ "words"\ list\ by\ frequency\ by\ the\ text\ \n\ in\ the\ Word\ objects.\ \ This\ is\ a\ helper\ method\ for\ sortWordsHelper.\n\ \ \ \ \ \ \ \n\ @param\ low\ \ \ \ the\ smallest\ index\ to\ be\ used\ in\ this\ portion\ of\ the\ merge\n\ @param\ mid\ \ \ \ the\ start\ of\ the\ second\ half\ of\ the\ array\ to\ be\ considered\n\ @param\ high\ \ \ the\ last\ index\ to\ be\ used\ (inclusive)\ in\ this\ portion\ of\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ merge\n
comment21.params=low\ high
comment21.target=void\ sortWordsHelper(int,\ int)
comment21.text=\n\ Sort\ "words"\ list\ lexicographically\ using\ a\ recursive\ merge\ sort.\n\ This\ is\ a\ helper\ method\ for\ sortWords.\n\ \ \ \ \ \ \ \n\ @param\ low\ \ \ \ the\ smallest\ index\ to\ be\ used\ in\ this\ portion\ of\ the\ sort\n\ @param\ high\ \ \ the\ last\ index\ to\ be\ used\ (inclusive)\ in\ this\ portion\ of\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ sort\n
comment22.params=low\ mid\ high
comment22.target=void\ mergeWords(int,\ int,\ int)
comment22.text=\n\ Merge\ portions\ of\ the\ "words"\ list\ lexicographically\ by\ the\ text\ \n\ in\ the\ Word\ objects.\ \ This\ is\ a\ helper\ method\ for\ sortWordsHelper.\n\ \ \ \ \ \ \ \n\ @param\ low\ \ \ \ the\ smallest\ index\ to\ be\ used\ in\ this\ portion\ of\ the\ merge\n\ @param\ mid\ \ \ \ the\ start\ of\ the\ second\ half\ of\ the\ array\ to\ be\ considered\n\ @param\ high\ \ \ the\ last\ index\ to\ be\ used\ (inclusive)\ in\ this\ portion\ of\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ merge\n
comment23.params=txt
comment23.target=int\ findWord(java.lang.String)
comment23.text=\n\ Finds\ the\ parameter\ "txt"\ in\ the\ words\ list\ and\ returns\ the\ index\n\ at\ which\ it\ is\ found.\ If\ txt\ is\ not\ in\ the\ words\ list,\ -1\ is\ returned.\n\ \n\ @postcondition\ \ \ words\ has\ been\ sorted\ alphabetically\n\ \n\ @param\ txt\ \ the\ word\ to\ be\ found\ in\ words\ list\ \n\ @return\ the\ index\ in\ which\ txt\ was\ found\ in\ words\ list.\ \ \n\ \ \ \ \ \ \ \ \ If\ txt\ is\ not\ in\ the\ words\ list,\ -1\ is\ returned.\n
comment24.params=txt\ low\ high
comment24.target=int\ searchWord(java.lang.String,\ int,\ int)
comment24.text=\n\ Using\ a\ binary\ search,\ finds\ the\ \ parameter\ txt\ in\ the\ words\ list\ and\n\ returns\ the\ index\ at\ which\ it\ is\ found.\ If\ txt\ is\ not\ in\ the\ words\ list,\ \n\ a\ -1\ is\ returned.\n\ This\ is\ a\ helper\ method\ for\ findWord.\n\ \n\ @precondition\ words\ list\ must\ be\ sorted\ alphabetically\n\ \n\ @param\ txt\ \ the\ word\ to\ be\ found\ in\ words\ list\ \n\ @param\ low\ \ \ \ the\ smallest\ index\ to\ be\ used\ in\ this\ portion\ of\ the\ search\n\ @param\ high\ \ \ the\ last\ index\ to\ be\ used\ (inclusive)\ in\ this\ portion\ of\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ search\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ @return\ the\ index\ in\ which\ txt\ was\ found\ in\ words\ list.\ \ \n\ \ \ \ \ \ \ \ \ If\ txt\ is\ not\ in\ the\ words\ list,\ -1\ is\ returned.\n
comment25.params=
comment25.target=void\ printMenu()
comment25.text=\n\ Prints\ the\ menu\ which\ gives\ all\ the\ possible\ options.\n
comment26.params=
comment26.target=boolean\ interactWithUser()
comment26.text=\n\ Asks\ the\ user\ which\ option\ they\ have\ chosen\ and\ further\ \n\ executes\ the\ corresponding\ method.\n\ \n\ @return\ whether\ or\ not\ the\ program\ has\ been\ terminated\ or\ \n\ in\ other\ words,\ the\ state\ of\ "done"\n
comment27.params=args
comment27.target=void\ main(java.lang.String[])
comment27.text=\n\ Entry\ point\ into\ WordAnalysis.\ \ It\ reads\ the\ input\ file\ and\ loops\n\ until\ the\ user\ indicates\ that\ he\ or\ she\ is\ done.\n\ \n\ @param\ \ args\ \ \ \ \ \ \ \ \ array\ with\ information\ that\ may\ be\ passed\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ at\ start\ of\ processing\n\ @throws\ IOException\ \ if\ file\ with\ the\ hurricane\ information\ cannot\ be\ found\n
comment3.params=x\ index
comment3.target=boolean\ isLetter(java.lang.String,\ int)
comment3.text=\n\ Returns\ whether\ the\ character\ at\ a\ particular\ index\ in\ the\n\ String\ x\ is\ a\ letter\ (between\ 'a'\ and\ 'z',\ or\ 'A'\ and\ 'Z,\ \n\ inclusive)\ or\ not.\n\ \n\ @param\ \ x\ \ \ \ \ string\ of\ characters\ whose\ index\ is\ being\ tested\n\ @param\ \ index\ the\ position\ in\ the\ String\ x\ that\ is\ being\ tested\ (for\ being\ a\ letter)\n\ \n\ @return\ true\ \ if\ the\ character\ at\ position\ index\ is\ a\ letter;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\n
comment4.params=str
comment4.target=boolean\ isLetter(java.lang.String)
comment4.text=\n\ Returns\ whether\ the\ character\ in\ the\ parameter\ str\ is\ a\ letter\ \n\ (between\ 'a'\ and\ 'z',\ or\ 'A'\ and\ 'Z,\ inclusive)\ or\ not.\n\ \n\ @param\ str\ \ \ \ \ String\ of\ one\ character\n\n\ @return\ true\ if\ the\ str\ has\ one\ character\ and\ that\ character\ is\ a\ letter;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\n
comment5.params=txt
comment5.target=int\ findOrInsertWord(java.lang.String)
comment5.text=\n\ Finds\ the\ txt\ in\ the\ words\ list.\ \ Once\ found,\ it\ adds\ one\n\ to\ the\ frequency.\ \ If\ txt\ is\ not\ in\ the\ words\ list,\ txt\ is\n\ added\ to\ the\ words\ list.\ \ This\ method\ uses\ a\ modified\ binary\ \n\ search\ to\ do\ this\ algorithm.\n\ \n\ @precondition\ \ words\ list\ is\ in\ lexicographic\ order\n\ @postcondition\ words\ list\ is\ in\ lexicographic\ order\n\ \n\ @param\ txt\ \ the\ word\ to\ be\ found\ in\ words\ list\ or\ added\ to\ words\n\ @return\ \ \ \ \ the\ position\ txt\ occupies\ in\ words\ list\n
comment6.params=text\ index
comment6.target=int\ addWord(java.lang.String,\ int)
comment6.text=\n\ Inserts\ the\ word\ alphabetically\ into\ list\ words,\ starting\n\ at\ the\ specified\ index.\ \ \ \n\ \n\ @preconditon\ \ \ words\ list\ is\ in\ lexicographic\ order\n\ @postcondition\ words\ list\ is\ in\ lexicographic\ order\n\ \n\ @param\ text\ \ the\ word\ to\ be\ added\n\ @param\ index\ the\ approximate\ location\ where\ the\ new\ word\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ to\ be\ inserted\n\ @return\ \ \ \ \ \ the\ position\ text\ occupies\ in\ words\ list\ \ \ \ \ \ \ \ \ \ \ \ \ \n
comment7.params=
comment7.target=void\ print()
comment7.text=\n\ Prints\ out\ all\ the\ words\ in\ the\ words\ list.\ \n\ Note\:\ the\ organization\ of\ the\ list\ (ordered\ alphabetically\ or\ \n\ \ \ \ \ \ \ by\ frequency)\ affects\ what\ is\ printed.\n
comment8.params=x
comment8.target=void\ printTopWords(int)
comment8.text=\n\ Prints\ out\ the\ first\ "x"\ number\ of\ words\ in\ the\ words\ list.\ \n\ \n\ Note\:\ the\ organization\ of\ the\ list\ (ordered\ lexicographically\ or\ \n\ \ \ \ \ \ \ by\ frequency)\ affects\ what\ is\ printed.\n\ \n\ @param\ x\ \ the\ number\ of\ words\ to\ be\ printed\ from\ words\ list\n
comment9.params=index
comment9.target=void\ printWord(int)
comment9.text=\n\ Prints\ the\ word\ at\ a\ particular\ position\ in\ the\ words\ list.\n\ \n\ @param\ index\ the\ position\ of\ interest\ in\ the\ words\ list\n
numComments=28
